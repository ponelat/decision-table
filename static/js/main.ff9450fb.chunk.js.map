{"version":3,"sources":["use-localstorage.js","App.tsx","download-file.js","serviceWorker.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","initDefinitions","header","enums","manyRowsFromColDefs","colDefs","explodeRows","base","pref","head","rest","length","flatMap","l","map","d","App","initData","definitions","rowMap","data","setDataFn","filename","setFilename","filters","setFilters","hideDataRows","setHideDataRows","setData","rowHash","row","r","i","findIndex","e","join","manyRows","useMemo","rowCount","clearFilter","produce","getRowDataWhen","when","getRowDataThen","then","setRowData","hash","target","given","setColHeader","val","removeCol","splice","newKey","split","setColEnums","setFilter","toLowerCase","rowsDone","Object","keys","shownRows","filter","showThisRow","some","f","g","trim","includes","rowData","numHiddenRows","className","html","onChange","onClick","headers","def","rows","str","mediaType","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","DownloadStrAsFile","cell","htmlFor","checked","name","type","col","placeholder","push","c","s","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ff9450fb.chunk.js","sourcesContent":["import {useState} from 'react'\n// Hook\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React, {useMemo, useEffect, useState} from 'react';\nimport useLocalStorage from './use-localstorage'\nimport produce from 'immer'\nimport logo from './logo.svg';\nimport './App.css';\nimport ContentEditable from 'react-contenteditable'\nimport DownloadStrAsFile from './download-file'\nimport './mousetrap.d'\nimport Mousetrap from 'mousetrap'\n\ninterface ColDefinition {\n  header: string;\n  enums: string[];\n}\n\ninterface Data {\n  definitions: ColDefinition[];\n  rowMap: RowData;\n}\n\ninterface RowData {\n  [key: string]: {\n    given?: string[];\n    when?: string;\n    then?: string;\n    [key: string]: string | string[] | undefined;\n  }\n}\n\ninterface TValue {\n  target: {\n    value: string;\n  }\n}\n\nconst initDefinitions: ColDefinition[] = [\n  {header: 'With Parent Node', enums: ['null', 'object', 'array']},\n  {header: 'From Node', enums: ['null', 'string', 'number', 'bool']},\n  {header: 'To Node', enums: ['null', 'object', 'array', 'string', 'number', 'bool']}\n]\n\nconst rowCountFromColDefs = (colDefs: ColDefinition[]): number => {\n  return colDefs.reduce((acc, def): number => acc * def.enums.length, 1)\n}\n\nconst explodeRows = (base: string[][], pref: string[]=[]): string[][] => {\n  const [head, ...rest] = base\n\n  if(!rest.length)\n    return head.map(l => {\n      return [...pref, l]\n    })\n\n  return head.flatMap(l => {\n    return explodeRows(rest, [...pref, l])\n  })\n}\n\nconst manyRowsFromColDefs = (colDefs: ColDefinition[]): string[][] => {\n  return explodeRows(colDefs.map(d => d.enums))\n}\n\n// function rowsFromColDefinitions(colDefs: ColDefinition[]) : string[][] {\n//   return colDefs.map(def => {\n//     return\n//   })\n//   return [[]]\n// }\n\n\nfunction App() {\n  const initData: Data = {\n    definitions: initDefinitions,\n    rowMap: {}\n  }\n  const initFilename = `decision-table.csv`\n\n  const [data, setDataFn] = useLocalStorage('data', initData)\n  const [filename, setFilename] = useLocalStorage('filename', initFilename)\n  const [filters, setFilters] = useLocalStorage('filters', [])\n  const {definitions, rowMap}: Data = data\n  const [hideDataRows, setHideDataRows] = useState(false)\n\n  const setData = (data: Data | Function) => {\n    const ret = setDataFn(data)\n    return ret\n  }\n\n  // [true, false, pet] => \"0/1/3\", based on col definitions\n  const rowHash = (row: string[]): string => {\n    return row.map((r,i) => {\n      return definitions[i].enums.findIndex(e => e === r)\n    }).join('/')\n  }\n\n  // Generated rows\n  const manyRows = useMemo(() => manyRowsFromColDefs(definitions), [definitions])\n  const rowCount = manyRows.length\n\n  const resetAll = () => {\n    setData(produce(() => initData))\n    setFilters([])\n    setFilename(initFilename)\n  }\n\n  const resetRows = () => {\n    setData(produce((data: Data) => {\n      data.rowMap = {}\n      return data\n    }))\n  }\n\n  const resetFilters = () => {\n    setFilters([])\n  }\n\n  const clearFilter = (i: number) => () => {\n    setFilters(produce(filters => {\n      delete filters[i]\n      return filters\n    }))\n  }\n\n  const downloadCsv = () => {\n    const headers = [...definitions.map(def => `${def.header} (${def.enums.join('/')})`), 'when', 'then']\n    const rows = manyRows.map(row => {\n      let {when, then} = rowMap[rowHash(row)] || {}\n      return [...row, when, then]\n    })\n\n    const csv = [headers, ...rows]\n    const csvStr = csv.map(r => r.map(cell => JSON.stringify(cell)).join(',')).join('\\n')\n\n    DownloadStrAsFile(csvStr, filename, 'text/csv')\n  }\n\n  const getRowDataWhen = (row: string[]): string => {\n    return (rowMap[rowHash(row)] || {}).when || ''\n  }\n\n  const getRowDataThen = (row: string[]): string => {\n    return (rowMap[rowHash(row)] || {}).then || ''\n  }\n\n  const setRowData = (row: string[], key: string) => (e: TValue) => setData(produce((data: Data) => {\n    let hash = rowHash(row)\n    data.rowMap[hash] = data.rowMap[hash] || {}\n    data.rowMap[hash][key] = e.target.value\n    data.rowMap[hash].given = row\n    return data\n  }))\n\n  const setColHeader = (i: number) => (val: TValue) => setData(produce((data: Data) => {\n    data.definitions[i].header = val.target.value\n    return data\n  }))\n\n  const removeCol = (i: number) => () => setData(produce((data: Data) => {\n    data.definitions.splice(i, 1)\n\n    // Move keys\n    for(let key in data.rowMap) {\n      let newKey = [...key.split('/')]\n      newKey.splice(i, 1)\n      data.rowMap[newKey.join('/')] = data.rowMap[key]\n      delete data.rowMap[key]\n    }\n\n    return data\n  }))\n\n  const setColEnums = (i: number) => (val: TValue) => setData(produce((data: Data) => {\n    data.definitions[i].enums = val.target.value.split('/')\n    return data\n  }))\n\n  const newCol = () => setData(produce((data: Data) => {\n    data.definitions.push({\n      header: \"New Column\",\n      enums: ['true', 'false']\n    })\n\n    // Move keys\n    for(let key in data.rowMap) {\n      data.rowMap[key + '/0'] = data.rowMap[key]\n      delete data.rowMap[key]\n    }\n\n    return data\n  }))\n\n  const setFilter = (i: number) => (val: TValue) => setFilters(produce((filters: string[]) => {\n    filters[i] = val.target.value.toLowerCase()\n    return filters\n  }))\n\n  const setFilterByCell = (i: number, s: string) => () => setFilters(produce((filters: string[]) => {\n    filters[i] = s\n    return filters\n  }))\n\n  const filterRows = (row: string[], i: number): boolean => {\n    let showThisRow = !filters.some((f: string,i: number) => {\n      if(!f)\n        return false\n      return !f.split('|').map(g => g.trim()).some(f => {\n        return row[i].toLowerCase().includes(f)\n      })\n    })\n\n    if(hideDataRows) {\n      let rowData = (rowMap[rowHash(row)])\n      showThisRow = showThisRow && !(!!rowData?.when || !!rowData?.then)\n    }\n\n    return showThisRow\n  }\n\n  const rowsDone = useMemo(() => Object.keys(rowMap).length, [rowMap])\n\n  const shownRows = manyRows.filter(filterRows)\n  const numHiddenRows = manyRows.length - shownRows.length\n\n  return (\n    <div className=\"App\">\n      <h1>Decision Table</h1>\n      <h3>\n        <ContentEditable className=\"filename\" html={filename} onChange={(e: TValue) => setFilename(e.target.value)}/>\n        <button onClick={downloadCsv}>Download CSV</button>\n      </h3>\n      <button onClick={resetAll}>Reset All</button>\n      <button onClick={resetRows}>Reset Data</button>\n      <button onClick={resetFilters}>Reset Filters</button>\n\n      <h4>Total: {rowCount} | When/Thens: {rowsDone} | Hidden {numHiddenRows}</h4>\n\n      <label htmlFor=\"hide-data-rows\">\n        Hide data rows\n      </label>\n      <input onChange={(e) => setHideDataRows(!!e.target.checked)} name=\"\" checked={hideDataRows} type=\"checkbox\" value=\"\"/>\n\n      <table>\n        <thead>\n          <tr>\n            <>\n              {data.definitions.map((col: ColDefinition,i: number) => (\n              <th key={i}>\n                <ContentEditable className=\"heading\" html={col.header} onChange={setColHeader(i)}/>\n                <ContentEditable className=\"enums\" html={col.enums.join('/')} onChange={setColEnums(i)}/>\n                <div className=\"filter\">\n                  <ContentEditable placeholder=\"...filter|filter\" html={filters[i] || ''} onChange={setFilter(i)}/>\n                  { filters[i] ? (\n                    <span className=\"clear-filter\" onClick={clearFilter(i)}>x</span>\n                  ) : null }\n                </div>\n                <button onClick={removeCol(i)}>-</button>\n              </th>\n            ))}\n            </>\n            <th> <button onClick={newCol}>+</button> </th>\n            <th>When</th>\n            <th>Then</th>\n          </tr>\n        </thead>\n        <tbody>\n          {shownRows.map((row, r) => (\n            <tr key={rowHash(row)}>\n              <>\n                {row.map((cell, c) => {\n                  return (\n                    <td className=\"cell\" key={c}>\n                      {cell}\n                      <span onClick={setFilterByCell(c, cell)}>o</span>\n                    </td>\n                  )\n                })}\n              </>\n              <td>&nbsp;</td>\n              <td>\n                <ContentEditable className=\"when\" html={getRowDataWhen(row)} onChange={setRowData(row, 'when')}/>\n              </td>\n              <td>\n                <ContentEditable className=\"then\" html={getRowDataThen(row)} onChange={setRowData(row, 'then')}/>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n    </div>\n  );\n}\n\nexport default App;\n","\nexport default function downloadStrAsFile(str, filename='data.json', mediaType='text/json'){\n  const dataStr = `data:${mediaType};charset=utf-8,` + encodeURIComponent(str)\n  const downloadAnchorNode = document.createElement('a')\n  downloadAnchorNode.setAttribute(\"href\",     dataStr)\n  downloadAnchorNode.setAttribute(\"download\", filename)\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}