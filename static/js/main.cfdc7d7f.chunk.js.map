{"version":3,"sources":["use-localstorage.js","App.tsx","download-file.js","serviceWorker.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","initDefinitions","header","enums","rowHash","row","join","manyRowsFromColDefs","colDefs","explodeRows","base","pref","head","rest","length","flatMap","l","map","d","App","initData","definitions","rowMap","data","setData","filename","setFilename","manyRows","useMemo","rowCount","getRowDataWhen","when","getRowDataThen","then","setRowData","e","produce","hash","target","given","setColHeader","i","val","removeCol","splice","setColEnums","split","rowsDone","Object","keys","className","html","onChange","onClick","headers","def","rows","str","mediaType","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","DownloadStrAsFile","r","cell","col","push","c","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cfdc7d7f.chunk.js","sourcesContent":["import {useState} from 'react'\n// Hook\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React, {useMemo} from 'react';\nimport useLocalStorage from './use-localstorage'\nimport produce from 'immer'\nimport logo from './logo.svg';\nimport './App.css';\nimport ContentEditable from 'react-contenteditable'\nimport DownloadStrAsFile from './download-file'\n\ninterface ColDefinition {\n  header: string;\n  enums: string[];\n}\n\ninterface Data {\n  definitions: ColDefinition[];\n  rowMap: RowData;\n}\n\ninterface RowData {\n  [key: string]: {\n    given?: string[];\n    when?: string;\n    then?: string;\n    [key: string]: string | string[] | undefined;\n  }\n}\n\ninterface TValue {\n  target: {\n    value: string;\n  }\n}\n\nconst initDefinitions: ColDefinition[] = [\n  {header: 'With Parent Node', enums: ['null', 'object', 'array']},\n  {header: 'From Node', enums: ['null', 'string', 'number', 'bool']},\n  {header: 'To Node', enums: ['null', 'object', 'array', 'string', 'number', 'bool']}\n]\n\nconst rowCountFromColDefs = (colDefs: ColDefinition[]): number => {\n  return colDefs.reduce((acc, def): number => acc * def.enums.length, 1)\n}\n\nconst rowHash = (row: string[]): string => row.join('/')\n\nconst explodeRows = (base: string[][], pref: string[]=[]): string[][] => {\n  const [head, ...rest] = base\n\n  if(!rest.length)\n    return head.map(l => {\n      return [...pref, l]\n    })\n\n  return head.flatMap(l => {\n    return explodeRows(rest, [...pref, l])\n  })\n}\n\nconst manyRowsFromColDefs = (colDefs: ColDefinition[]): string[][] => {\n  return explodeRows(colDefs.map(d => d.enums))\n}\n\n// function rowsFromColDefinitions(colDefs: ColDefinition[]) : string[][] {\n//   return colDefs.map(def => {\n//     return\n//   })\n//   return [[]]\n// }\n\nfunction App() {\n  const initData: Data = {\n    definitions: initDefinitions,\n    rowMap: {}\n  }\n  const initFilename = `decision-table.csv`\n\n  const [data, setData] = useLocalStorage('data', initData)\n  const [filename, setFilename] = useLocalStorage('filename', initFilename)\n  const {definitions, rowMap}: Data = data\n\n  // Generated rows\n  const manyRows = useMemo(() => manyRowsFromColDefs(definitions), [definitions])\n  const rowCount = manyRows.length\n\n  const resetAll = () => {\n    setData(produce(() => initData))\n    setFilename(initFilename)\n  }\n\n  const resetRows = () => {\n    setData(produce((data: Data) => {\n      data.rowMap = {}\n      return data\n    }))\n  }\n\n\n  const downloadCsv = () => {\n    const headers = [...definitions.map(def => `${def.header} (${def.enums.join('/')})`), 'when', 'then']\n    const rows = manyRows.map(row => {\n      let {when, then} = rowMap[rowHash(row)] || {}\n      return [...row, when, then]\n    })\n\n    const csv = [headers, ...rows]\n    const csvStr = csv.map(r => r.map(cell => JSON.stringify(cell)).join(',')).join('\\n')\n\n    DownloadStrAsFile(csvStr, filename, 'text/csv')\n  }\n\n  const getRowDataWhen = (row: string[]) => {\n    return (rowMap[rowHash(row)] || {}).when\n  }\n\n  const getRowDataThen = (row: string[]) => {\n    return (rowMap[rowHash(row)] || {}).then\n  }\n\n  const setRowData = (row: string[], key: string) => (e: TValue) => setData(produce((data: Data) => {\n    let hash = rowHash(row)\n    data.rowMap[hash] = data.rowMap[hash] || {}\n    data.rowMap[hash][key] = e.target.value\n    data.rowMap[hash].given = row\n    return data\n  }))\n\n  const setColHeader = (i: number) => (val: TValue) => setData(produce((data: Data) => {\n    data.definitions[i].header = val.target.value\n    return data\n  }))\n\n  const removeCol = (i: number) => () => setData(produce((data: Data) => {\n    data.definitions.splice(i, 1)\n    return data\n  }))\n\n  const setColEnums = (i: number) => (val: TValue) => setData(produce((data: Data) => {\n    data.definitions[i].enums = val.target.value.split('/')\n    return data\n  }))\n\n  const newCol = () => setData(produce((data: Data) => {\n    data.definitions.push({\n      header: \"New Column\",\n      enums: ['true', 'false']\n    })\n    return data\n  }))\n\n  const rowsDone = useMemo(() => Object.keys(rowMap).length, [rowMap])\n\n  return (\n    <div className=\"App\">\n      <h1>Decision Table</h1>\n      <h3>\n        <ContentEditable className=\"filename\" html={filename} onChange={(e: TValue) => setFilename(e.target.value)}/>\n        <button onClick={downloadCsv}>Download CSV</button>\n      </h3>\n      <button onClick={resetAll}>Reset All</button>\n      <button onClick={resetRows}>Reset Data</button>\n      <h4>Total: {rowCount} | When/Thens: {rowsDone}</h4>\n\n      <table>\n        <thead>\n          <tr>\n            <>\n              {data.definitions.map((col: ColDefinition,i: number) => (\n              <th key={col.header}>\n                <ContentEditable className=\"heading\" html={col.header} onChange={setColHeader(i)}/>\n                <ContentEditable className=\"enums\" html={col.enums.join('/')} onChange={setColEnums(i)}/>\n                <button onClick={removeCol(i)}>-</button>\n              </th>\n            ))}\n            </>\n            <th> <button onClick={newCol}>+</button> </th>\n            <th>When</th>\n            <th>Then</th>\n          </tr>\n        </thead>\n        <tbody>\n          {manyRows.map((row, r) => (\n            <tr key={rowHash(row)}>\n              <>\n                {row.map((cell, c) => {\n                  return (\n                    <td key={c}>{cell}</td>\n                  )\n                })}\n              </>\n              <td>&nbsp;</td>\n              <td>\n                <ContentEditable className=\"when\" html={getRowDataWhen(row) || ''} onChange={setRowData(row, 'when')}/>\n              </td>\n              <td>\n                <ContentEditable className=\"then\" html={getRowDataThen(row) || ''} onChange={setRowData(row, 'then')}/>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n    </div>\n  );\n}\n\nexport default App;\n","\nexport default function downloadStrAsFile(str, filename='data.json', mediaType='text/json'){\n  const dataStr = `data:${mediaType};charset=utf-8,` + encodeURIComponent(str)\n  const downloadAnchorNode = document.createElement('a')\n  downloadAnchorNode.setAttribute(\"href\",     dataStr)\n  downloadAnchorNode.setAttribute(\"download\", filename)\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}